name: Specification Compliance Check

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    paths:
      - '**.md'
      - 'tests/**'
      - '.github/workflows/compliance-check.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  compliance-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Add any additional dependencies here if needed

    - name: Run compliance tests
      run: |
        python tests/test_compliance.py

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: compliance-test-results
        path: test_results.json

    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('test_results.json', 'utf8'));

          let comment = '## üìã Specification Compliance Check Results\n\n';

          if (results.all_passed) {
            comment += '‚úÖ **All specifications passed compliance check!**\n\n';
          } else {
            comment += '‚ùå **Some specifications failed compliance check.**\n\n';
          }

          comment += `- Total specifications: ${results.total_specs}\n`;
          comment += `- Passed (‚â•90%): ${results.passed_specs}\n`;
          comment += `- Failed (<90%): ${results.failed_specs}\n\n`;

          if (results.failed_specs > 0) {
            comment += '### Failed Specifications:\n';
            results.results.forEach(spec => {
              if (spec.compliance_percentage < 90) {
                comment += `\n**${spec.file}** - ${spec.compliance_percentage}% compliance\n`;
                if (spec.sections_missing.length > 0) {
                  comment += `- Missing sections: ${spec.sections_missing.join(', ')}\n`;
                }
                if (spec.errors.length > 0) {
                  comment += `- Errors: ${spec.errors.join('; ')}\n`;
                }
              }
            });
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  markdown-lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Markdown Lint
      uses: DavidAnson/markdownlint-cli2-action@v11
      with:
        globs: |
          **/*.md
          !node_modules
          !.git

  directory-structure:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check directory structure
      run: |
        echo "Checking repository directory structure..."

        # Check for required directories
        required_dirs=("productivity" "coding" "communication" "research" "creative" "tests" ".github" ".claude")

        for dir in "${required_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "‚ùå Missing required directory: $dir"
            exit 1
          else
            echo "‚úÖ Found directory: $dir"
          fi
        done

        # Check for specification files in wrong locations
        echo -e "\nChecking for misplaced specification files..."

        # Find .md files not in correct locations
        misplaced=$(find . -name "*.md" -type f \
          ! -path "./.github/*" \
          ! -path "./tests/*" \
          ! -path "./.claude/*" \
          ! -path "./productivity/*" \
          ! -path "./coding/*" \
          ! -path "./communication/*" \
          ! -path "./research/*" \
          ! -path "./creative/*" \
          ! -name "README.md" \
          ! -name "TEMPLATE.md" \
          ! -name "LICENSE.md")

        if [ ! -z "$misplaced" ]; then
          echo "‚ùå Found specification files in wrong locations:"
          echo "$misplaced"
          exit 1
        else
          echo "‚úÖ All files are in correct locations"
        fi
